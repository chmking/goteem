// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/chmking/horde/agent (interfaces: Session,StateMachine)

// Package agent is a generated GoMock package.
package agent

import (
	context "context"
	session "github.com/chmking/horde/agent/session"
	public "github.com/chmking/horde/protobuf/public"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockSession is a mock of Session interface
type MockSession struct {
	ctrl     *gomock.Controller
	recorder *MockSessionMockRecorder
}

// MockSessionMockRecorder is the mock recorder for MockSession
type MockSessionMockRecorder struct {
	mock *MockSession
}

// NewMockSession creates a new mock instance
func NewMockSession(ctrl *gomock.Controller) *MockSession {
	mock := &MockSession{ctrl: ctrl}
	mock.recorder = &MockSessionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSession) EXPECT() *MockSessionMockRecorder {
	return m.recorder
}

// Count mocks base method
func (m *MockSession) Count() int {
	ret := m.ctrl.Call(m, "Count")
	ret0, _ := ret[0].(int)
	return ret0
}

// Count indicates an expected call of Count
func (mr *MockSessionMockRecorder) Count() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockSession)(nil).Count))
}

// Scale mocks base method
func (m *MockSession) Scale(arg0 context.Context, arg1 session.ScaleOrder, arg2 session.Callback) {
	m.ctrl.Call(m, "Scale", arg0, arg1, arg2)
}

// Scale indicates an expected call of Scale
func (mr *MockSessionMockRecorder) Scale(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scale", reflect.TypeOf((*MockSession)(nil).Scale), arg0, arg1, arg2)
}

// Stop mocks base method
func (m *MockSession) Stop(arg0 session.Callback) {
	m.ctrl.Call(m, "Stop", arg0)
}

// Stop indicates an expected call of Stop
func (mr *MockSessionMockRecorder) Stop(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockSession)(nil).Stop), arg0)
}

// MockStateMachine is a mock of StateMachine interface
type MockStateMachine struct {
	ctrl     *gomock.Controller
	recorder *MockStateMachineMockRecorder
}

// MockStateMachineMockRecorder is the mock recorder for MockStateMachine
type MockStateMachineMockRecorder struct {
	mock *MockStateMachine
}

// NewMockStateMachine creates a new mock instance
func NewMockStateMachine(ctrl *gomock.Controller) *MockStateMachine {
	mock := &MockStateMachine{ctrl: ctrl}
	mock.recorder = &MockStateMachineMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStateMachine) EXPECT() *MockStateMachineMockRecorder {
	return m.recorder
}

// Idle mocks base method
func (m *MockStateMachine) Idle() error {
	ret := m.ctrl.Call(m, "Idle")
	ret0, _ := ret[0].(error)
	return ret0
}

// Idle indicates an expected call of Idle
func (mr *MockStateMachineMockRecorder) Idle() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Idle", reflect.TypeOf((*MockStateMachine)(nil).Idle))
}

// Running mocks base method
func (m *MockStateMachine) Running() error {
	ret := m.ctrl.Call(m, "Running")
	ret0, _ := ret[0].(error)
	return ret0
}

// Running indicates an expected call of Running
func (mr *MockStateMachineMockRecorder) Running() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Running", reflect.TypeOf((*MockStateMachine)(nil).Running))
}

// Scaling mocks base method
func (m *MockStateMachine) Scaling() error {
	ret := m.ctrl.Call(m, "Scaling")
	ret0, _ := ret[0].(error)
	return ret0
}

// Scaling indicates an expected call of Scaling
func (mr *MockStateMachineMockRecorder) Scaling() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scaling", reflect.TypeOf((*MockStateMachine)(nil).Scaling))
}

// State mocks base method
func (m *MockStateMachine) State() public.Status {
	ret := m.ctrl.Call(m, "State")
	ret0, _ := ret[0].(public.Status)
	return ret0
}

// State indicates an expected call of State
func (mr *MockStateMachineMockRecorder) State() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "State", reflect.TypeOf((*MockStateMachine)(nil).State))
}

// Stopping mocks base method
func (m *MockStateMachine) Stopping() error {
	ret := m.ctrl.Call(m, "Stopping")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stopping indicates an expected call of Stopping
func (mr *MockStateMachineMockRecorder) Stopping() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stopping", reflect.TypeOf((*MockStateMachine)(nil).Stopping))
}
