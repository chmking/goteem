// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/chmking/horde/manager (interfaces: Registry,StateMachine)

// Package manager_test is a generated GoMock package.
package manager_test

import (
	context "context"
	registry "github.com/chmking/horde/manager/registry"
	public "github.com/chmking/horde/protobuf/public"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockRegistry is a mock of Registry interface
type MockRegistry struct {
	ctrl     *gomock.Controller
	recorder *MockRegistryMockRecorder
}

// MockRegistryMockRecorder is the mock recorder for MockRegistry
type MockRegistryMockRecorder struct {
	mock *MockRegistry
}

// NewMockRegistry creates a new mock instance
func NewMockRegistry(ctrl *gomock.Controller) *MockRegistry {
	mock := &MockRegistry{ctrl: ctrl}
	mock.recorder = &MockRegistryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRegistry) EXPECT() *MockRegistryMockRecorder {
	return m.recorder
}

// Add mocks base method
func (m *MockRegistry) Add(arg0 registry.Registration) error {
	ret := m.ctrl.Call(m, "Add", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add
func (mr *MockRegistryMockRecorder) Add(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockRegistry)(nil).Add), arg0)
}

// BeginHealthcheck mocks base method
func (m *MockRegistry) BeginHealthcheck(arg0 context.Context) {
	m.ctrl.Call(m, "BeginHealthcheck", arg0)
}

// BeginHealthcheck indicates an expected call of BeginHealthcheck
func (mr *MockRegistryMockRecorder) BeginHealthcheck(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginHealthcheck", reflect.TypeOf((*MockRegistry)(nil).BeginHealthcheck), arg0)
}

// GetActive mocks base method
func (m *MockRegistry) GetActive() []registry.Registration {
	ret := m.ctrl.Call(m, "GetActive")
	ret0, _ := ret[0].([]registry.Registration)
	return ret0
}

// GetActive indicates an expected call of GetActive
func (mr *MockRegistryMockRecorder) GetActive() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActive", reflect.TypeOf((*MockRegistry)(nil).GetActive))
}

// GetAll mocks base method
func (m *MockRegistry) GetAll() []registry.Registration {
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]registry.Registration)
	return ret0
}

// GetAll indicates an expected call of GetAll
func (mr *MockRegistryMockRecorder) GetAll() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockRegistry)(nil).GetAll))
}

// Quarantine mocks base method
func (m *MockRegistry) Quarantine(arg0 string) error {
	ret := m.ctrl.Call(m, "Quarantine", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Quarantine indicates an expected call of Quarantine
func (mr *MockRegistryMockRecorder) Quarantine(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Quarantine", reflect.TypeOf((*MockRegistry)(nil).Quarantine), arg0)
}

// RegisterCallback mocks base method
func (m *MockRegistry) RegisterCallback(arg0 func()) {
	m.ctrl.Call(m, "RegisterCallback", arg0)
}

// RegisterCallback indicates an expected call of RegisterCallback
func (mr *MockRegistryMockRecorder) RegisterCallback(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterCallback", reflect.TypeOf((*MockRegistry)(nil).RegisterCallback), arg0)
}

// MockStateMachine is a mock of StateMachine interface
type MockStateMachine struct {
	ctrl     *gomock.Controller
	recorder *MockStateMachineMockRecorder
}

// MockStateMachineMockRecorder is the mock recorder for MockStateMachine
type MockStateMachineMockRecorder struct {
	mock *MockStateMachine
}

// NewMockStateMachine creates a new mock instance
func NewMockStateMachine(ctrl *gomock.Controller) *MockStateMachine {
	mock := &MockStateMachine{ctrl: ctrl}
	mock.recorder = &MockStateMachineMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStateMachine) EXPECT() *MockStateMachineMockRecorder {
	return m.recorder
}

// Idle mocks base method
func (m *MockStateMachine) Idle() error {
	ret := m.ctrl.Call(m, "Idle")
	ret0, _ := ret[0].(error)
	return ret0
}

// Idle indicates an expected call of Idle
func (mr *MockStateMachineMockRecorder) Idle() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Idle", reflect.TypeOf((*MockStateMachine)(nil).Idle))
}

// Scaling mocks base method
func (m *MockStateMachine) Scaling() error {
	ret := m.ctrl.Call(m, "Scaling")
	ret0, _ := ret[0].(error)
	return ret0
}

// Scaling indicates an expected call of Scaling
func (mr *MockStateMachineMockRecorder) Scaling() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scaling", reflect.TypeOf((*MockStateMachine)(nil).Scaling))
}

// State mocks base method
func (m *MockStateMachine) State() public.Status {
	ret := m.ctrl.Call(m, "State")
	ret0, _ := ret[0].(public.Status)
	return ret0
}

// State indicates an expected call of State
func (mr *MockStateMachineMockRecorder) State() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "State", reflect.TypeOf((*MockStateMachine)(nil).State))
}

// Stopping mocks base method
func (m *MockStateMachine) Stopping() error {
	ret := m.ctrl.Call(m, "Stopping")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stopping indicates an expected call of Stopping
func (mr *MockStateMachineMockRecorder) Stopping() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stopping", reflect.TypeOf((*MockStateMachine)(nil).Stopping))
}
